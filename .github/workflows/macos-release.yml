name: Release macOS App

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Setup Code Signing
      run: |
        # Create a temporary keychain
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
        
        # Import the certificate
        echo "${{ secrets.MACOS_P12_BASE64 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_P12_PASSWORD }}" -T /usr/bin/codesign
        
        # Set the partition list
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
    - name: Build for Release
      run: |
        cd SwiftUI
        xcodebuild -project "Edge Studio.xcodeproj" \
          -scheme "Edge Studio" \
          -configuration Release \
          -destination 'platform=macOS,arch=arm64' \
          -archivePath "build/Edge Studio.xcarchive" \
          archive \
          CODE_SIGN_IDENTITY="Developer ID Application" \
          CODE_SIGN_STYLE="Manual" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM }}"
          
    - name: Export App
      run: |
        cd SwiftUI
        xcodebuild -exportArchive \
          -archivePath "build/Edge Studio.xcarchive" \
          -exportPath "build/export" \
          -exportOptionsPlist exportOptions.plist
          
    - name: Create DMG
      run: |
        cd SwiftUI
        # Create a temporary directory for DMG contents
        mkdir -p dmg_temp
        
        # Copy the app to the temporary directory
        cp -R "build/export/Edge Studio.app" dmg_temp/
        
        # Create a symbolic link to Applications folder
        ln -s /Applications dmg_temp/Applications
        
        # Get the version from the tag
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        
        # Create DMG
        hdiutil create -volname "Edge Studio $VERSION" \
          -srcfolder dmg_temp \
          -ov -format UDZO \
          "Edge Studio $VERSION.dmg"
          
        # Clean up
        rm -rf dmg_temp
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload DMG to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./SwiftUI/Edge Studio ${{ github.ref_name }}.dmg
        asset_name: Edge Studio ${{ github.ref_name }}.dmg
        asset_content_type: application/octet-stream 